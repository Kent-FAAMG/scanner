// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.bureau.qrscanner.core.network.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class AadhaarQrRequestJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<AadhaarQrRequest>() {
  private val options: JsonReader.Options = JsonReader.Options.of("encodedString", "imageBase64",
      "imageUrl", "consent", "consentText", "custID", "sessionId")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "encodedString")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "consent")

  @Volatile
  private var constructorRef: Constructor<AadhaarQrRequest>? = null

  public override fun toString(): String = buildString(38) {
      append("GeneratedJsonAdapter(").append("AadhaarQrRequest").append(')') }

  public override fun fromJson(reader: JsonReader): AadhaarQrRequest {
    var encodedString: String? = null
    var imageBase64: String? = null
    var imageUrl: String? = null
    var consent: Boolean? = null
    var consentText: String? = null
    var custID: String? = null
    var sessionId: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> encodedString = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("encodedString", "encodedString", reader)
        1 -> {
          imageBase64 = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("imageBase64",
              "imageBase64", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          imageUrl = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("imageUrl",
              "imageUrl", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> consent = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("consent",
            "consent", reader)
        4 -> consentText = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("consentText", "consentText", reader)
        5 -> custID = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("custID",
            "custID", reader)
        6 -> sessionId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("sessionId",
            "sessionId", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff9.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  AadhaarQrRequest(
          encodedString = encodedString ?: throw Util.missingProperty("encodedString",
              "encodedString", reader),
          imageBase64 = imageBase64 as String,
          imageUrl = imageUrl as String,
          consent = consent ?: throw Util.missingProperty("consent", "consent", reader),
          consentText = consentText ?: throw Util.missingProperty("consentText", "consentText",
              reader),
          custID = custID ?: throw Util.missingProperty("custID", "custID", reader),
          sessionId = sessionId ?: throw Util.missingProperty("sessionId", "sessionId", reader)
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<AadhaarQrRequest> = this.constructorRef ?:
          AadhaarQrRequest::class.java.getDeclaredConstructor(String::class.java,
          String::class.java, String::class.java, Boolean::class.javaPrimitiveType,
          String::class.java, String::class.java, String::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          encodedString ?: throw Util.missingProperty("encodedString", "encodedString", reader),
          imageBase64,
          imageUrl,
          consent ?: throw Util.missingProperty("consent", "consent", reader),
          consentText ?: throw Util.missingProperty("consentText", "consentText", reader),
          custID ?: throw Util.missingProperty("custID", "custID", reader),
          sessionId ?: throw Util.missingProperty("sessionId", "sessionId", reader),
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: AadhaarQrRequest?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("encodedString")
    stringAdapter.toJson(writer, value_.encodedString)
    writer.name("imageBase64")
    stringAdapter.toJson(writer, value_.imageBase64)
    writer.name("imageUrl")
    stringAdapter.toJson(writer, value_.imageUrl)
    writer.name("consent")
    booleanAdapter.toJson(writer, value_.consent)
    writer.name("consentText")
    stringAdapter.toJson(writer, value_.consentText)
    writer.name("custID")
    stringAdapter.toJson(writer, value_.custID)
    writer.name("sessionId")
    stringAdapter.toJson(writer, value_.sessionId)
    writer.endObject()
  }
}
