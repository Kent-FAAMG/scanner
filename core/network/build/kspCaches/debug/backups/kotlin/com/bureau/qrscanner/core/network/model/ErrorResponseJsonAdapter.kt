// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.bureau.qrscanner.core.network.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class ErrorResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<ErrorResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("success", "message",
      "statusCode", "error", "errorMessage")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "success")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "message")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "statusCode")

  @Volatile
  private var constructorRef: Constructor<ErrorResponse>? = null

  public override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("ErrorResponse").append(')') }

  public override fun fromJson(reader: JsonReader): ErrorResponse {
    var success: Boolean? = false
    var message: String? = null
    var statusCode: Int? = null
    var error: String? = null
    var errorMessage: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          success = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("success",
              "success", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> message = nullableStringAdapter.fromJson(reader)
        2 -> statusCode = nullableIntAdapter.fromJson(reader)
        3 -> error = nullableStringAdapter.fromJson(reader)
        4 -> errorMessage = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffffe.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  ErrorResponse(
          success = success as Boolean,
          message = message,
          statusCode = statusCode,
          error = error,
          errorMessage = errorMessage
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<ErrorResponse> = this.constructorRef ?:
          ErrorResponse::class.java.getDeclaredConstructor(Boolean::class.javaPrimitiveType,
          String::class.java, Int::class.javaObjectType, String::class.java, String::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          success,
          message,
          statusCode,
          error,
          errorMessage,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: ErrorResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("success")
    booleanAdapter.toJson(writer, value_.success)
    writer.name("message")
    nullableStringAdapter.toJson(writer, value_.message)
    writer.name("statusCode")
    nullableIntAdapter.toJson(writer, value_.statusCode)
    writer.name("error")
    nullableStringAdapter.toJson(writer, value_.error)
    writer.name("errorMessage")
    nullableStringAdapter.toJson(writer, value_.errorMessage)
    writer.endObject()
  }
}
